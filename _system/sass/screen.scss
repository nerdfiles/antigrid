/***
@fileOverview

                      _             _     _
                  _  (_)           (_)   | |
     _____ ____ _| |_ _  ____  ____ _  __| |
    (____ |  _ (_   _) |/ _  |/ ___) |/ _  |
    / ___ | | | || |_| ( (_| | |   | ( (_| |
    \_____|_| |_| \__)_|\___ |_|   |_|\____|
                       (_____|

A SASS-y "abstract" and lightweight responsive grid system.

@project   antigrid
@version   0.0.1
@package   html5-css3
@author    nerdfiles
@cssdoc    version 1.0-pre
@license   WTFPL

***/

/*@import "compass/reset";*/

/* ------------------------------ Defaults  */

$rankName          : "rank";
$fileName          : "file";
$default-max-width : "1000px";
$a--default        : "#111111";
$a--link           : "#111111";
$a--visited        : "#999999";
$a--hover          : "#f1f1f1";
$a--active         : "#003399";


/* ------------------------------ Global  */

* {
  box-sizing: border-box;
}


/** ----------------------------- Basic Functions

    @description

      Lifted from ZURB's Foundation 5.

    @see http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method,
      http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method

**/
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}


/** ----------------------------- Media Queries

    @description

      Modified from ZURB's Foundation 5.

    @usage

      @media #{\$small} {
      }

      @media #{\$slinder} {
      }

      @media #{\$medium} {
      }

      @media #{\$large} {
      }

**/
$small-range   : (0em, 20em);        /* 0, 320px */
$slinder-range : (23.438em, 50em);   /* 641px, 800px */
$medium-range  : (50.063em, 64em);   /* 641px, 1024px */
$large-range   : (64.063em, 90em);   /* 1025px, 1440px */
$xlarge-range  : (90.063em, 120em);  /* 1441px, 1920px */
$xxlarge-range : (120.063em);        /* 1921px */

$screen        : "only screen" !default;

$landscape     : "#{$screen} and (orientation: landscape)" !default;
$portrait      : "#{$screen} and (orientation: portrait)" !default;
$webkit        : "#{$screen} and (-webkit-min-device-pixel-ratio: 0)" !default;

$small-up      : $screen !default;
$small-only    : "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;
$small         : $small-up;

$slinder-up    : "#{$screen} and (min-width: #{lower-bound($slinder-range)})" !default;
$slinder-only  : "#{$screen} and (min-width: #{lower-bound($slinder-range)}) and (max-width: #{upper-bound($slinder-range)})" !default;
$slinder       : $slinder-up;

$medium-up     : "#{$screen} and (min-width: #{lower-bound($medium-range)})" !default;
$medium-only   : "#{$screen} and (min-width: #{lower-bound($medium-range)}) and (max-width: #{upper-bound($medium-range)})" !default;
$medium        : $medium-up;

$large-up      : "#{$screen} and (min-width: #{lower-bound($large-range)})" !default;
$large-only    : "#{$screen} and (min-width: #{lower-bound($large-range)}) and (max-width: #{upper-bound($large-range)})" !default;
$large         : $large-up;

$xlarge-up     : "#{$screen} and (min-width: #{lower-bound($xlarge-range)})" !default;
$xlarge-only   : "#{$screen} and (min-width: #{lower-bound($xlarge-range)}) and (max-width: #{upper-bound($xlarge-range)})" !default;

$xxlarge-up    : "#{$screen} and (min-width: #{lower-bound($xxlarge-range)})" !default;
$xxlarge-only  : "#{$screen} and (min-width: #{lower-bound($xxlarge-range)}) and (max-width: #{upper-bound($xxlarge-range)})" !default;


/* ------------------------------ Utilities  */

@mixin split($enable: false, $vertical-center: false) {
  /*
    A full-height viewport splitter tool. Use at top level of SASS/CSS document.

    @note If $vertical-center is true, then we are expecting that our grid 
          system will not be applied for the topmost level; so nesting within 
          another arbitrary, non-semantic layer will be necessary; that is, 
          three "ranks" will be necessary before the grid can take place 
          with centering.

    @usage

      <body>
        <div class="rank">
          <div class="rank">
          </div>
          <div class="rank">
          </div>
        </div>
      </body>

    @detail

      -----------------------------
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      -----------------------------

  */
  @if $enable == true {
    &, body {
      height: 100%;
    }

    body > .#{$rankName} {
      min-height : 100%;
      display    : flex;
    }

    body > .#{$rankName} > .#{$rankName} {
      padding-left    : 0;
      padding-right   : 0;

      flex            : 1;
      min-height      : 100%;

      @if $vertical-center == true {
        display         : flex;
      }
      justify-content : center;
      flex-direction  : column;
    }
  }

}


/* ------------------------------ Grid System  */

@mixin _rank( $child: "rank", $max-width: "100%" ) {
  /*
    @abstract
  */
  &:before {
    content : "";
    display : table;
  }

  &:after {
    content : "";
    display : table;
    clear   : both;
  }

  width     : 100%;
  max-width : $max-width;
  margin    : 0 auto;

  & .#{$child} > [class*="#{$fileName}"]:first-child {
    padding-left: 0;
  }

}

@mixin _file( $response: "l" ) {
  /*
    @abstract
    @usage

      <div class="rank">
        <div class="file-l{{N}}-m{{N}}-s{{N}}">
        ...
        </div>
      </div

    @detail file-l4-m3-s6::file-l2-m3-s6

      "large"
      -----------------------------
      |                   |       |
      |                   |       |
      -----------------------------

      "medium"
      ---------------------
      |         |         |
      |         |         |
      ---------------------

      "small"
      --------
      |      |
      |      |
      --------
      |      |
      |      |
      --------

  */
  [class*="-#{$response}6"] {
    width: 100%;
  }

  [class*="-#{$response}5"] {
    width: 83.333333334%;
  }

  [class*="-#{$response}4"] {
    width: 66.666666667%;
  }

  [class*="-#{$response}3"] {
    width: 50%;
  }

  [class*="-#{$response}2"] {
    width: 33.333333333%;
  }

  [class*="-#{$response}1"] {
    width: 16.666666667%;
  }

}

@mixin castling( $width: 23% ) {
  /*
    @usage

    <ul class="castling">
      <li>...</li>
      <li>...</li>
      <li>...</li>
      <li>...</li>
    </ul>
  */

  &:after {
    content       : '';
    display       : inline-block;
    width         : 100%;
    /*border-bottom : 5px dashed #922d8d;*/
  }

  & {

    text-align  : justify;
    /*font-size   : 0;*/
    font-size   : 0.1px;
    padding     : 0;

    li {
      list-style    : none;
      display       : inline-block;
      width         : $width;
      /*height        : 0;*/
      transition    : all 150ms ease-out;
      font-size     : 16px;
      text-align    : left;
    }

    .interpose {
      padding       : 0;
      /*background    : none;*/
      border-bottom : 5px solid #922d8d;
    }

    .break {
      width  : 100%;
      height : 0;
    }

  }
}

@mixin flank( $noisesHeight, $rows, $offset ) {
  /*
    Flanks include rows.

    @usage

      <div class="row-1">
        1
      </div>
      <div class="row-3">
        3
      </div>
      <div class="row-2">
        2
      </div>

  */
  @for $i from 1 to $rows + 1 {
    .row-#{$i} {
      $areaHeight : "(100vh - #{$noisesHeight})";
      $boxHeight  : #{$areaHeight} / #{$rows};
      /*$offset     : $offset / $rows;*/
      overflow-x  : hidden !important;
      overflow-y  : auto;
      height      : calc(((#{$boxHeight}) * #{$i}) - #{$offset});
      margin: {
        bottom: $offset;
      }
    }
  }

}


/* ------------------------------ Elements  */

@mixin anchors( $default, $link, $visited, $hover, $active ) {

  a {

    color: $default;

    &:link {
      color: $link;
    }

    &:visited {
      color: $visited;
    }

    &:hover {
      color: $hover;
    }

    &:active {
      color: $active;
    }

  }

}


/* ------------------------------ Implementation  */

:root {
  @include split($enable: true, $vertical-center: false);
}

:root.with-centered-ranks {
  @include split($enable: true, $vertical-center: true);
}

@media screen and (min-width: 960px) {
  @include _file($response: "l");
}

@media screen and (min-width: 500px) and (max-width: 959px) {
  @include _file($response: "m");
}

@media screen and (max-width: 499px) {
  @include _file($response: "s");
}

[class*="#{$fileName}"] {
  display : block;
  float   : left;
  padding : 0 10px;
}

.#{$rankName} {
  @include _rank($child: $rankName, $max-width: $default-max-width);
}

[class*="#{$fileName}"] img {
  width  : 100%;
  height : auto;
}

.castling {
  @include castling();
}

.flank {
  @include flank(100px, 6, 10px);
}

/** ----------------------------- Normalization

    @consider https://github.com/marxo/Canonical.css/blob/master/canonical.scss

**/
* {
  line-height: 1.25em;
  @include anchors($default: $a--default, $link: $a--link, $visited: $a--visited, $hover: $a--hover, $active: $a--active);
}

body {
  font-family : sans-serif;
  color       : #313233;
  margin     : 0;
}

p, img {
  margin: 0 0 20px 0;
}

pre {
  margin: 1.6em 0;
}

strong {
  font-style: italic;
}

