/***
@fileOverview

                      _             _     _
                  _  (_)           (_)   | |
     _____ ____ _| |_ _  ____  ____ _  __| |
    (____ |  _ (_   _) |/ _  |/ ___) |/ _  |
    / ___ | | | || |_| ( (_| | |   | ( (_| |
    \_____|_| |_| \__)_|\___ |_|   |_|\____|
                       (_____|

A SASS-y, idiomatic, "abstract" but lightweight responsive grid system for 
vertically centered grids/elements, "flanks", "castling", and full viewport 
splits.

@project   antigrid
@version   0.0.1
@package   html5-css3
@author    nerdfiles
@cssdoc    version 1.0-pre
@license   WTFPL

***/

@import "compass/reset";
@import "compass/css3";

/* ------------------------------ Defaults  */

$rankName          : "rank";
$fileName          : "file";
$default-max-width : 1000px;
$column-gutter     : 10px;
$row-gutter        : 10px;

$a--default        : #111111;
$a--link           : #111111;
$a--visited        : #999999;
$a--hover          : #f1f1f1;
$a--active         : #003399;


/* ------------------------------ Global  */

* {
  box-sizing: border-box;
}


/** ----------------------------- Basic Functions

    @description

      Lifted from ZURB's Foundation 5.

    @see http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method,
      http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method

**/
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}


/** ----------------------------- Media Queries

    @description

      Modified from ZURB's Foundation 5.

    @usage

      @media #{\$small} {
      }

      @media #{\$slinder} {
      }

      @media #{\$medium} {
      }

      @media #{\$large} {
      }

**/
$small-range   : (0em, 20em);        /* 0, 320px */
$slinder-range : (23.438em, 50em);   /* 641px, 800px */
$medium-range  : (50.063em, 64em);   /* 641px, 1024px */
$large-range   : (64.063em, 90em);   /* 1025px, 1440px */
$xlarge-range  : (90.063em, 120em);  /* 1441px, 1920px */
$xxlarge-range : (120.063em);        /* 1921px */

$screen        : "only screen" !default;

$landscape     : "#{$screen} and (orientation: landscape)" !default;
$portrait      : "#{$screen} and (orientation: portrait)" !default;
$webkit        : "#{$screen} and (-webkit-min-device-pixel-ratio: 0)" !default;

$small-up      : $screen !default;
$small-only    : "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;
$small         : $small-up;

$slinder-up    : "#{$screen} and (min-width: #{lower-bound($slinder-range)})" !default;
$slinder-only  : "#{$screen} and (min-width: #{lower-bound($slinder-range)}) and (max-width: #{upper-bound($slinder-range)})" !default;
$slinder       : $slinder-up;

$medium-up     : "#{$screen} and (min-width: #{lower-bound($medium-range)})" !default;
$medium-only   : "#{$screen} and (min-width: #{lower-bound($medium-range)}) and (max-width: #{upper-bound($medium-range)})" !default;
$medium        : $medium-up;

$large-up      : "#{$screen} and (min-width: #{lower-bound($large-range)})" !default;
$large-only    : "#{$screen} and (min-width: #{lower-bound($large-range)}) and (max-width: #{upper-bound($large-range)})" !default;
$large         : $large-up;

$xlarge-up     : "#{$screen} and (min-width: #{lower-bound($xlarge-range)})" !default;
$xlarge-only   : "#{$screen} and (min-width: #{lower-bound($xlarge-range)}) and (max-width: #{upper-bound($xlarge-range)})" !default;

$xxlarge-up    : "#{$screen} and (min-width: #{lower-bound($xxlarge-range)})" !default;
$xxlarge-only  : "#{$screen} and (min-width: #{lower-bound($xxlarge-range)}) and (max-width: #{upper-bound($xxlarge-range)})" !default;


/* ------------------------------ Utilities  */

@mixin split($enable: false, $vertical-center: false) {
  /*
    A full-height viewport splitter tool. Use at top level of SASS/CSS document.

    @note If $vertical-center is true, then we are expecting that our grid 
          system will not be applied for the topmost level; so nesting within 
          another arbitrary, non-semantic layer will be necessary; that is, 
          three "ranks" will be necessary before the grid can take place 
          with centering.

    @usage

      <body>
        <div class="rank">
          <div class="rank">
          </div>
          <div class="rank">
          </div>
        </div>
      </body>

    @detail

      -----------------------------
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      |             |             |
      -----------------------------

  */
  @if $enable == true {
    &, body {
      height: 100%;
    }

    body > .#{$rankName} {
      min-height : 100%;
      display    : flex;
    }

    body > .#{$rankName} > .#{$rankName} {
      padding-left    : 0;
      padding-right   : 0;

      flex            : 1;
      min-height      : 100%;

      @if $vertical-center == true {
        display         : flex;
      }
      justify-content : center;
      flex-direction  : column;
    }
  }

}


/* ------------------------------ Grid System  */

@mixin _tablebase($flex-direction: row, $flex-flow: row nowrap, $flex-wrap: nowrap, $justify-content: flex-start, $align-content: stretch, $align-items: stretch, $align-self: auto, $order: false) {

  display          : flex;

  @if variable-exists(flex-flow) == true {
    flex-flow      : $flex-flow;       /* @options $flex-direction $flex-wrap */
  }

  @if variable-exists(flex-flow) != true {
    flex-direction : $flex-direction;  /* @options row, column */
    flex-wrap      : $flex-wrap;       /* @options wrap, nowrap, wrap-reverse */
  }

  justify-content  : $justify-content; /* @options flex-start, flex-end, center, space-between, space-around */
  align-content    : $align-content;   /* @options flex-start, flex-end, center, space-between, space-around, stretch */
  align-items      : $align-items;     /* @options flex-start, flex-end, center, baseline, stretch */

  //@if $align-self != auto {
  //  align-self     : $align-self;
  //}

  & > * {
    flex-grow   : 0;
    flex-shrink : 0;
    flex-basis  : 25%;
    @content;
  }

  $nb: 0;

  @if $order != false {
    @each $item-order in $order {
      $nb: $nb + 1;
      & > *:nth-of-type(#{$nb}) {
        order: $item-order;
      }
    }
  }

}

@mixin _rank( $child: "rank", $max-width: 100% ) {
  /*
    @abstract
  */
  &:before {
    content : "";
    display : table;
  }

  &:after {
    content : "";
    display : table;
    clear   : both;
  }

  width        : 100%;
  max-width    : $max-width;
  margin-left  : auto;
  margin-right : auto;

  & .#{$child} > [class*="#{$fileName}"]:first-child {
    padding-left: 0;
  }

  & .#{$child} > [class*="#{$fileName}"]:last-child {
    padding-right: 0;
  }

}

@mixin _file( $response: "l" ) {
  /*
    @abstract
    @usage

      <div class="rank">
        <div class="file-l{{N}}-m{{N}}-s{{N}}">
        ...
        </div>
      </div

    @detail file-l4-m3-s6::file-l2-m3-s6

      "large"
      -----------------------------
      |                   |       |
      |                   |       |
      -----------------------------

      "medium"
      ---------------------
      |         |         |
      |         |         |
      ---------------------

      "small"
      --------
      |      |
      |      |
      --------
      |      |
      |      |
      --------

  */
  [class*="-#{$response}6"] {
    width: 100%;
  }

  [class*="-#{$response}5"] {
    width: 83.333333334%;
  }

  [class*="-#{$response}4"] {
    width: 66.666666667%;
  }

  [class*="-#{$response}3"] {
    width: 50%;
  }

  [class*="-#{$response}2"] {
    width: 33.333333333%;
  }

  [class*="-#{$response}1"] {
    width: 16.666666667%;
  }

  // @schema "file-R{{N}}" && "__centered"
  [class*="-#{$response}"][class*="__centered"] {
    float        : none !important;
    margin-left  : auto;
    margin-right : auto;
  }


  @if $response == 's' {
    [class*="#{$fileName}"][class*="s6"] {
      padding-left  : 0;
      padding-right : 0;
    }
  }

}

@mixin castling( $width: 23% ) {
  /*
    @usage

    <ul class="castling">
      <li>...</li>
      <li>...</li>
      <li>...</li>
      <li>...</li>
    </ul>
  */

  &:after {
    content : '';
    display : inline-block;
    width   : 100%;
  }

  img { max-width: 100%; }

  & {

    text-align  : justify;
    font-size   : 0;
    padding     : 0;

    li {
      list-style : none;
      display    : inline-block;
      width      : $width;
      transition : all 150ms ease-out;
      font-size  : 16px;
      @if $width == 50% {
        text-align: center;
      } else {
        text-align : left;
      }
      float      : none !important;
    }

    .interpose {
    }

    .break {
      width  : 100%;
      height : 0;
    }

  }
}

@mixin flank( $noisesHeight, $rows, $offset ) {
  /*
    Flanks include rows.

    @usage

      <div class="row-1">
        1
      </div>
      <div class="row-3">
        3
      </div>
      <div class="row-2">
        2
      </div>

  */
  @for $i from 1 to $rows + 1 {
    .row-#{$i} {
      $areaHeight : "(100vh - #{$noisesHeight})";
      $boxHeight  : #{$areaHeight} / #{$rows};
      /*$offset     : $offset / $rows;*/
      overflow-x  : hidden !important;
      overflow-y  : auto;
      height      : calc(((#{$boxHeight}) * #{$i}) - #{$offset});
      margin: {
        bottom: $offset;
      }
    }
  }

}


/* ------------------------------ Views  */

@mixin _ViewTokenizer($tokens...) {
  /**
   @description
   Token mapper to URL contracts within Interface and collocated with with 
   routes.js or ui-router state machines, which themselves map to class-based 
   views in Django; and these views can be modularized controllerAs within the 
   AMD schema facilitated by angularAMD; this makes it scalable to package SCSS 
   within "web" metamodules in large-scale AMD implementations.
   @params arguments Tokens to represent URL entities.
   @example
   "orders/_base" as value to import within primary interface.
  **/
  $nb: 0;
  $base: "pages";
  $sep: "/";
  $contexts: ();
  @each $tokenConstruct in $tokens {
    $nb: $nb + 1;
    $nb-word: 0;

    $base: $base + $tokenConstruct;
    @each $word in $tokenConstruct {

      $nb-word: $nb-word + 1;
      $base: $base + $sep + $word;
      $contexts: append($contexts, $base, comma);

      [class*="#{$contexts}"] {
        @content;
      }

    }
  }
}

@mixin ListView($_tokens...) {
  /**
    @example pages/home.scss::contains::@include ListView((aside news)) { ... }

             HTML will contain somewhere non-arbitrarily and probably with 
             an @ng-repeat sprinkled about. (Generally what we are doing is 
             predicting areas of complexity and attempting to manage that 
             complexity with restrictive class-based views.):

             <ul
               ng-class="{
                 'pages/news': true
               }"
             >
               <li ng-repeat="article in news">
                 ...
               </li>
               ...
             </ul>

             Your SASS will probably say something specific about how articles 
             should look within the given file's implied page context, and so 
             developers MAY contextualize here:

                 HTML:

                     <section
                       class="content-type--news"
                       id="related-news"
                     >
                       <!-- contains the above example -->
                     </section>

                  SASS/SCSS (file: pages/news.scss):

                     section[class*="news"] {
                       @include ListView((aside news)) {
                         background-color: transparent;
                       }
                     }

             This idea is proffered within the grid system class nominalizing 
             procedure. We might ask "Why <div>s?" and answer: well, they are 
             non-semantic, which is practically a vacuous answer because <div>s 
             are always chosen for a *reason*, just not one that is privy to 
             typesetting or journalism, and typically for "web rationales", etc.

             Yes, I'm arguing that <div>s are actually semantic, but within the 
             context of the IoT.
  **/
  @include _ViewTokenizer($_tokens) {
    @content;
  }
}

@mixin DetailView($_tokens...) {
  /**
    @example pages/base, pages/home
  **/
  @include _ViewTokenizer($_tokens) {
    @content;
  }
}


/* ------------------------------ Elements  */

@mixin anchors( $default, $link, $visited, $hover, $active ) {

  a {

    color: $default;

    &:link {
      color: $link;
    }

    &:visited {
      color: $visited;
    }

    &:hover {
      color: $hover;
    }

    &:active {
      color: $active;
    }

    @content;

  }

}


/* ------------------------------ Implementation  */

:root {
  @include split($enable: true, $vertical-center: false);
}

:root.with-centered-ranks {
  @include split($enable: true, $vertical-center: true);
}

@media screen and (min-width: 960px) {
  @include _file($response: "l");
}

@media screen and (min-width: 500px) and (max-width: 959px) {
  @include _file($response: "m");
}

@media screen and (max-width: 499px) {
  @include _file($response: "s");
}

[class*="#{$fileName}"] {
  display : block;
  float   : left;
  padding : 0 $column-gutter;
}

.#{$rankName} {
  @include _rank($child: $rankName, $max-width: $default-max-width);
}

[class*="#{$fileName}"] img {
  width  : 100%;
  height : auto;
}

[class*="castling"]:not([class*="__queen-side"]) {
  @include castling();
}

[class*="castling"][class*="__queen-side"] {
  @include castling($width: 50%);
}

.flank {
  @include flank(100px, 6, $row-gutter);
}

.tablebase {
  @include _tablebase($flex-wrap: wrap) {
    flex-grow: 1;
  }
}


/** ----------------------------- Normalization

    @consider https://github.com/marxo/Canonical.css/blob/master/canonical.scss

**/
* {
  @include anchors($default: $a--default, $link: $a--link, $visited: $a--visited, $hover: $a--hover, $active: $a--active);
}


/* ------------------------------ Typesetting  */

$effects: "";

@mixin gwf($fonts...) {
  /*
    @note https://github.com/sass/sass/issues/926
  */
  $url: "http://fonts.googleapis.com/css?family=";
  $nb: 0;

  @each $font-name in $fonts {
    $nb: $nb + 1;
    $nb-word: 0;

    @each $word in $font-name {
      $nb-word: $nb-word + 1;
      $url: $url + $word;

      @if $nb-word < length($font-name) {
        $url: $url + "+";
      }
    }

    @if $nb < length($fonts) {
       $url: $url + "|";
    }
  }

  @if $effects != "" {
    /*
      @param &effect=shadow-multiple|emboss|3d
    */
    $url: $url + "&effect=#{$effects}"

  }

  @import url(#{$url});
}

$font-p: Open Sans;
$font-s: Roboto Slab;

@include gwf($font-p, $font-s);

